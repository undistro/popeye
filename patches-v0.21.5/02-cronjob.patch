commit 38e629bd801f7f5f3c15430a210b4dc8520fc709
Author: Kevin Conner <kev.conner@getupcloud.com>
Date:   Mon May 6 15:49:17 2024 -0700

    Remove check for no active jobs, since CronJobs are periodic, and fix issues identifying CronJob failures

diff --git a/internal/lint/cronjob.go b/internal/lint/cronjob.go
index 802b57e..9a13995 100644
--- a/internal/lint/cronjob.go
+++ b/internal/lint/cronjob.go
@@ -58,10 +58,10 @@ func (s *CronJob) checkCronJob(ctx context.Context, fqn string, cj *batchv1.Cron
 	}
 
 	if len(cj.Status.Active) == 0 {
-		s.AddCode(ctx, 1501)
-	}
-	if cj.Status.LastSuccessfulTime == nil {
-		s.AddCode(ctx, 1502)
+		if cj.Status.LastScheduleTime == nil ||
+			(cj.Status.LastScheduleTime != nil && (cj.Status.LastSuccessfulTime == nil || cj.Status.LastSuccessfulTime.Before(cj.Status.LastScheduleTime))) {
+			s.AddCode(ctx, 1502)
+		}
 	}
 
 	if sa := cj.Spec.JobTemplate.Spec.Template.Spec.ServiceAccountName; sa != "" {
diff --git a/internal/lint/cronjob_test.go b/internal/lint/cronjob_test.go
index eb6dbb2..151b8f2 100644
--- a/internal/lint/cronjob_test.go
+++ b/internal/lint/cronjob_test.go
@@ -35,7 +35,7 @@ func TestCronJobLint(t *testing.T) {
 
 	cj := NewCronJob(test.MakeCollector(t), dba)
 	assert.Nil(t, cj.Lint(test.MakeContext("batch/v1/cronjobs", "cronjobs")))
-	assert.Equal(t, 2, len(cj.Outcome()))
+	assert.Equal(t, 4, len(cj.Outcome()))
 
 	ii := cj.Outcome()["default/cj1"]
 	assert.Equal(t, 2, len(ii))
@@ -45,17 +45,41 @@ func TestCronJobLint(t *testing.T) {
 	assert.Equal(t, rules.WarnLevel, ii[1].Level)
 
 	ii = cj.Outcome()["default/cj2"]
-	assert.Equal(t, 6, len(ii))
+	assert.Equal(t, 5, len(ii))
 	assert.Equal(t, `[POP-1500] CronJob is suspended`, ii[0].Message)
 	assert.Equal(t, rules.WarnLevel, ii[0].Level)
-	assert.Equal(t, `[POP-1501] No active jobs detected`, ii[1].Message)
-	assert.Equal(t, rules.InfoLevel, ii[1].Level)
-	assert.Equal(t, `[POP-1502] CronJob has not run yet or is failing`, ii[2].Message)
+	assert.Equal(t, `[POP-1502] CronJob has not run yet or is failing`, ii[1].Message)
+	assert.Equal(t, rules.WarnLevel, ii[1].Level)
+	assert.Equal(t, `[POP-307] CronJob references a non existing ServiceAccount: "sa-bozo"`, ii[2].Message)
+	assert.Equal(t, rules.WarnLevel, ii[2].Level)
+	assert.Equal(t, `[POP-100] Untagged docker image in use`, ii[3].Message)
+	assert.Equal(t, rules.ErrorLevel, ii[3].Level)
+	assert.Equal(t, `[POP-106] No resources requests/limits defined`, ii[4].Message)
+	assert.Equal(t, rules.WarnLevel, ii[4].Level)
+
+	ii = cj.Outcome()["default/cj3"]
+	assert.Equal(t, 5, len(ii))
+	assert.Equal(t, `[POP-1500] CronJob is suspended`, ii[0].Message)
+	assert.Equal(t, rules.WarnLevel, ii[0].Level)
+	assert.Equal(t, `[POP-1502] CronJob has not run yet or is failing`, ii[1].Message)
+	assert.Equal(t, rules.WarnLevel, ii[1].Level)
+	assert.Equal(t, `[POP-307] CronJob references a non existing ServiceAccount: "sa-bozo"`, ii[2].Message)
+	assert.Equal(t, rules.WarnLevel, ii[2].Level)
+	assert.Equal(t, `[POP-100] Untagged docker image in use`, ii[3].Message)
+	assert.Equal(t, rules.ErrorLevel, ii[3].Level)
+	assert.Equal(t, `[POP-106] No resources requests/limits defined`, ii[4].Message)
+	assert.Equal(t, rules.WarnLevel, ii[4].Level)
+
+	ii = cj.Outcome()["default/cj4"]
+	assert.Equal(t, 5, len(ii))
+	assert.Equal(t, `[POP-1500] CronJob is suspended`, ii[0].Message)
+	assert.Equal(t, rules.WarnLevel, ii[0].Level)
+	assert.Equal(t, `[POP-1502] CronJob has not run yet or is failing`, ii[1].Message)
+	assert.Equal(t, rules.WarnLevel, ii[1].Level)
+	assert.Equal(t, `[POP-307] CronJob references a non existing ServiceAccount: "sa-bozo"`, ii[2].Message)
 	assert.Equal(t, rules.WarnLevel, ii[2].Level)
-	assert.Equal(t, `[POP-307] CronJob references a non existing ServiceAccount: "sa-bozo"`, ii[3].Message)
-	assert.Equal(t, rules.WarnLevel, ii[3].Level)
-	assert.Equal(t, `[POP-100] Untagged docker image in use`, ii[4].Message)
-	assert.Equal(t, rules.ErrorLevel, ii[4].Level)
-	assert.Equal(t, `[POP-106] No resources requests/limits defined`, ii[5].Message)
-	assert.Equal(t, rules.WarnLevel, ii[5].Level)
+	assert.Equal(t, `[POP-100] Untagged docker image in use`, ii[3].Message)
+	assert.Equal(t, rules.ErrorLevel, ii[3].Level)
+	assert.Equal(t, `[POP-106] No resources requests/limits defined`, ii[4].Message)
+	assert.Equal(t, rules.WarnLevel, ii[4].Level)
 }
diff --git a/internal/lint/testdata/batch/cjob/1.yaml b/internal/lint/testdata/batch/cjob/1.yaml
index e760b3e..ba3d966 100644
--- a/internal/lint/testdata/batch/cjob/1.yaml
+++ b/internal/lint/testdata/batch/cjob/1.yaml
@@ -72,5 +72,60 @@ items:
     schedule: '* * * * *'
     successfulJobsHistoryLimit: 3
     suspend: true
+- apiVersion: batch/v1
+  kind: CronJob
+  metadata:
+    name: cj3
+    namespace: default
+  spec:
+    concurrencyPolicy: Forbid
+    failedJobsHistoryLimit: 1
+    jobTemplate:
+      spec:
+        template:
+          spec:
+            serviceAccountName: sa-bozo
+            containers:
+            - image: blang/busybox-bash
+              imagePullPolicy: Always
+              name: c1
+              resources: {}
+            dnsPolicy: ClusterFirst
+            restartPolicy: OnFailure
+            schedulerName: default-scheduler
+            securityContext: {}
+            terminationGracePeriodSeconds: 30
+    schedule: '* * * * *'
+    successfulJobsHistoryLimit: 3
+    suspend: true
+  status:
+    lastScheduleTime: "2024-05-03T17:48:00Z"
+- apiVersion: batch/v1
+  kind: CronJob
+  metadata:
+    name: cj4
+    namespace: default
+  spec:
+    concurrencyPolicy: Forbid
+    failedJobsHistoryLimit: 1
+    jobTemplate:
+      spec:
+        template:
+          spec:
+            serviceAccountName: sa-bozo
+            containers:
+            - image: blang/busybox-bash
+              imagePullPolicy: Always
+              name: c1
+              resources: {}
+            dnsPolicy: ClusterFirst
+            restartPolicy: OnFailure
+            schedulerName: default-scheduler
+            securityContext: {}
+            terminationGracePeriodSeconds: 30
+    schedule: '* * * * *'
+    successfulJobsHistoryLimit: 3
+    suspend: true
   status:
-      active: []
+    lastScheduleTime: "2024-05-03T17:48:00Z"
+    lastSuccessfulTime: "2024-05-03T15:48:38Z"
